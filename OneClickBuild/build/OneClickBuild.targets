<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="Test" DependsOnTargets="Build;TestWithNunit"/>
  <Target Name="Coverage" DependsOnTargets="Build;OpenCoverWithNUnit"/>
  <Target Name="CoverageReport" DependsOnTargets="Coverage;OpenCoverReport"/>
  <Target Name="Package" DependsOnTargets="Build;PackageWithNuGet"/>
  <Target Name="Deploy" DependsOnTargets="Build;Package;DeployWithNuGet"/>

  <PropertyGroup>
    <!-- Use AppVeyor Build-Number, cf.: http://www.appveyor.com/docs/environment-variables -->
    <Build Condition="'$(CI)' == 'True'">$(APPVEYOR_BUILD_NUMBER)</Build>
    <!-- Use Build-Number from Jenkins or TeamCity -->
    <Build Condition="'$(BUILD_NUMBER)' != ''">$(BUILD_NUMBER)</Build>
    <!-- Fallback to "0" if still not set -->
    <Build Condition="'$(Build)' == ''">0</Build>
    <DeployFailOnBuildNotSet Condition="'$(DeployFailOnBuildNotSet)' == ''">true</DeployFailOnBuildNotSet>

    <NuspecFile Condition="'$(NuspecFile)'==''">$(ProjectDir)Package.nuspec</NuspecFile>
    <NuGetSourceToDeploy Condition="'$(NuGetSourceToDeploy)'==''">https://www.nuget.org</NuGetSourceToDeploy>
  </PropertyGroup>


  <!-- NuGet Packaging -->
  <Target Name="PackageWithNuGet" DependsOnTargets="Build">
    <PropertyGroup>
      <Revision>$(GitVersion_Sha)</Revision>
    </PropertyGroup>

    <Message Importance="Normal" Condition="!Exists($(NuspecFile))" Text="Skipping target because .nuspec-file is missing (expected '$(NuspecFile)')" />
    <Exec Condition="Exists($(NuspecFile))"
          Command="nuget pack $(NuspecFile) -Properties Version=$(GitVersion_NuGetVersion);Revision=$(Revision);Configuration=$(Configuration)"/>
  </Target>

  <Target Name="DeployWithNuGet" DependsOnTargets="PackageWithNuGet">
    <Error Condition="'$(Build)' == '0' And '$(DeployFailOnBuildNotSet)' != 'false'" Text="Build number not set. See the OneClickBuild README."/>

    <PropertyGroup>
      <PackageVersion Condition="'$(PackageVersion)'==''">$(GitVersion_NuGetVersion)</PackageVersion>
      <PackageId Condition="'$(PackageName)'=='' And Exists('$(ProjectName).$(PackageVersion).nupkg')">$(ProjectName)</PackageId>
      <PackageId Condition="'$(PackageName)'=='' And Exists('$(AssemblyName).$(PackageVersion).nupkg')">$(AssemblyName)</PackageId>
      <PackageId Condition="'$(PackageName)'=='' And Exists('$(RootNamespace).$(PackageVersion).nupkg')">$(RootNamespace)</PackageId>
      <PackageFile>$(PackageId).$(PackageVersion).nupkg</PackageFile>
    </PropertyGroup>
    
    <Message Condition="!Exists($(PackageFile))" Text="Skipping target because package file '$(PackageFile)' has not been built for project '$(ProjectName)'" Importance="Normal"  />
    <!-- To set API key use "NuGet.exe setApiKey <key> -Source <source>" -->
    <Message Condition="'$(PackageFile)'!='' And Exists($(PackageFile))" Text="Pushing package $(PackageFile) to $(NuGetSourceToDeploy)..." Importance="High"  />
    <Exec Condition="'$(PackageFile)'!='' And Exists($(PackageFile))"
          Command="nuget push $(PackageFile) -Source $(NuGetSourceToDeploy) > NUL" />
  </Target>

  <!-- NUnit -->
  <PropertyGroup>
    <TestsProjectPattern Condition="'$(TestsProjectPattern)' == '' And $(OutputType.EndsWith('Exe'))">$(OutDir)$(AssemblyName).exe</TestsProjectPattern>
    <TestsProjectPattern Condition="'$(TestsProjectPattern)' == '' And '$(OutputType)' == 'Library'">$(OutDir)$(AssemblyName).dll</TestsProjectPattern>
    <TestResultsDir Condition="'$(TestResultsDir)' == ''">$(SolutionDir)testresults\</TestResultsDir>
    <TestResults Condition="'$(TestResults)' == ''">$(TestResultsDir)$(ProjectName).Tests.xml</TestResults>
    <!-- NUnit verbosity: Off|Error|Warning|Info|Verbose-->
    <TestVerbosity Condition="'$(TestVerbosity)' == ''">Off</TestVerbosity>
  </PropertyGroup>

  <Target Name="TestWithNunit" DependsOnTargets="PrepareTests;SelectNUnitConsole;_TestWithNunit" />

  <Target Name="_TestWithNunit" Condition="'@(TestAssemblies)' != ''">
    <PropertyGroup>
      <CommonNUnitArgs>/framework=$(TargetFrameworkVersion) /trace=$(TestVerbosity)</CommonNUnitArgs>
      <NUnitResultFormat Condition="'$(NUnitResultFormat)' == ''">nunit2</NUnitResultFormat>
      <Nunit3Args Condition="'$(UseNUnit3)' == 'true'">--result:TestResult.xml;format=$(NUnitResultFormat)</Nunit3Args>
      <Nunit2Args Condition="'$(UseNUnit3)' != 'true'">/nologo /nodots /noshadow /domain=single</Nunit2Args>
      <NunitArgs>$(CommonNUnitArgs) $(NUnit2Args) $(Nunit3Args)</NunitArgs>
    </PropertyGroup>
    
    <Exec WorkingDirectory="$(OutDir)"
        Command="&quot;@(NUnitConsole->'%(FullPath)')&quot; $(NunitArgs) @(TestAssemblies, ' ')" />
    <Move SourceFiles="$(OutDir)\TestResult.xml" DestinationFiles="$(TestResults)"/>
  </Target>
  
  <Target Name="SelectNUnitConsole" Condition="'@(NUnitConsole)'==''">
    <PropertyGroup>
      <NUnitPath Condition="'$(UseNUnit3)' != 'true' And '$(PlatformTarget)' == 'x86'">$(SolutionDir)packages\NUnit.*\tools\nunit-console-x86.exe</NUnitPath>
      <NUnitPath Condition="'$(UseNUnit3)' != 'true' And '$(PlatformTarget)' != 'x86'">$(SolutionDir)packages\NUnit.*\tools\nunit-console.exe</NUnitPath>
      <NUnitPath Condition="'$(UseNUnit3)' == 'true'">$(SolutionDir)packages\NUnit.Console.*\tools\nunit3-console.exe</NUnitPath>
    </PropertyGroup>
    <ItemGroup>
      <NUnitConsoleFiles Include="$(NUnitPath)"/>
    </ItemGroup>
    <GetLatest Files="@(NUnitConsoleFiles)">
      <Output TaskParameter="Result" ItemName="NUnitConsole"/>
    </GetLatest>    
  </Target>

  <!-- OpenCover -->
  <PropertyGroup>
    <OpenCoverFilter Condition="'$(OpenCoverFilter)' == ''">+[$(AssemblyName)]* -[*]*Tests -[FluentAssertions]*</OpenCoverFilter>
    <OpenCoverOutput>$(TestResultsDir)$(ProjectName).Coverage.xml</OpenCoverOutput>
    <!-- exclude generated code -->
    <!-- [ExcludeFromCodeCoverage] cf.: https://github.com/OpenCover/opencover/issues/195 -->
    <OpenCoverExcludeAttributes Condition="'$(OpenCoverExcludeAttributes)' == ''">*DebuggerNonUserCode*;*.GeneratedCode*;*.ExcludeFromCodeCoverage*</OpenCoverExcludeAttributes>
    <OpenCoverExcludeFiles Condition="'$(OpenCoverExcludeFiles)' == ''">*\*.g.cs</OpenCoverExcludeFiles>
    <CoverageFailOnTargetFail Condition="'$(CoverageFailOnTargetFail)' == ''">true</CoverageFailOnTargetFail>
    <CoverageReportDir>$(TestResultsDir)coverage\$(ProjectName)</CoverageReportDir>
    <!--OpenCover verbosity: Off|Fatal|Error|Warn|Info|Debug|Verbose|All -->
    <CoverageVerbosity Condition="'$(CoverageVerbosity)' == ''">Warn</CoverageVerbosity>
    <!-- ReportGenerator Verbosity: Verbose|Info|Error -->
    <CoverageReportVerbosity Condition="'$(CoverageReportVerbosity)' == ''">Error</CoverageReportVerbosity>
  </PropertyGroup>

  <Target Name="OpenCoverWithNUnit"
          DependsOnTargets="PrepareTests;SelectNUnitConsole;SelectOpenCoverConsole;_OpenCoverWithNUnit">
  </Target>

  <Target Name="_OpenCoverWithNUnit" Condition="'@(TestAssemblies)' != ''">
    <PropertyGroup>
      <!-- Skip register profiler per user if run by System account -->
      <RegisterProfiler Condition="!$(USERPROFILE.EndsWith('systemprofile'))">-register:user</RegisterProfiler>
      <RegisterProfiler Condition="$(USERPROFILE.EndsWith('systemprofile'))">-register</RegisterProfiler>
      <ReturnTargetCode Condition="'$(CoverageFailOnTargetFail)' == 'true'">-returntargetcode</ReturnTargetCode>
      <OpenCoverArgs>$(RegisterProfiler) -filter:&quot;$(OpenCoverFilter)&quot; -output:&quot;$(OpenCoverOutput)&quot; -nodefaultfilters -mergebyhash -skipautoprops $(ReturnTargetCode) -excludebyattribute:&quot;$(OpenCoverExcludeAttributes)&quot; -excludebyfile:&quot;$(OpenCoverExcludeFiles)&quot; -log:$(CoverageVerbosity)</OpenCoverArgs>

      <CommonNUnitArgs>/framework=$(TargetFrameworkVersion) /trace=$(TestVerbosity)</CommonNUnitArgs>
      <NUnitResultFormat Condition="'$(NUnitResultFormat)' == ''">nunit2</NUnitResultFormat>
      <Nunit3Args Condition="'$(UseNUnit3)' == 'true'">--result:TestResult.xml;format=$(NUnitResultFormat)</Nunit3Args>
      <Nunit2Args Condition="'$(UseNUnit3)' != 'true'">/nologo /nodots /noshadow /domain=single</Nunit2Args>
      <NunitArgs>$(CommonNUnitArgs) $(NUnit2Args) $(Nunit3Args)</NunitArgs>
    </PropertyGroup>

    <Exec WorkingDirectory="$(OutDir)"
          IgnoreStandardErrorWarningFormat="true"
          Command="&quot;@(OpenCoverConsole->'%(FullPath)')&quot; $(OpenCoverArgs) -target:&quot;@(NUnitConsole->'%(FullPath)')&quot; -targetdir:. -targetargs:&quot;$(NunitArgs) @(TestAssemblies, ' ')&quot;" />
    <Move SourceFiles="$(OutDir)\TestResult.xml" DestinationFiles="$(TestResults)"/>
  </Target>
  
  <Target Name="SelectOpenCoverConsole" Condition="'@(OpenCoverConsole)'==''">
    <ItemGroup>
      <OpenCoverConsoleFiles Include="$(SolutionDir)packages\OpenCover.*\tools\OpenCover.Console.exe"/>
    </ItemGroup>
    <GetLatest Files="@(OpenCoverConsoleFiles)">
      <Output TaskParameter="Result" ItemName="OpenCoverConsole"/>
    </GetLatest>    
  </Target>
  

  <!--Coverage Report -->
  <Target Name="OpenCoverReport" DependsOnTargets="OpenCoverWithNUnit;PrepareCoverage;SelectReportGenerator">
    <PropertyGroup>
      <ReportGeneratorArgs>-reports:$(OpenCoverOutput) -targetdir:$(CoverageReportDir) -verbosity:$(CoverageReportVerbosity)</ReportGeneratorArgs>
    </PropertyGroup>
    <Message Condition="'@(TestAssemblies)' == ''" 
         Text="Skipping target since no test assemblies to report coverage on" />
    <Exec Condition="'@(TestAssemblies)' != ''"  
         Command="@(ReportGenerator->'%(FullPath)') $(ReportGeneratorArgs)"
         WorkingDirectory="$(OutDir)" />
  </Target>
  
  <Target Name="SelectReportGenerator" Condition="'@(ReportGenerator)'==''">
    <ItemGroup>
      <ReportGeneratorFiles Include="$(SolutionDir)packages\ReportGenerator.*\tools\ReportGenerator.exe"/>
    </ItemGroup>
    <GetLatest Files="@(ReportGeneratorFiles)">
      <Output TaskParameter="Result" ItemName="ReportGenerator"/>
    </GetLatest>    
  </Target>
  

  <!-- Helper targets -->
  <!-- helper target to get the names of the assemblies to test -->
  <Target Name="GetTestAssemblies" DependsOnTargets="Build">
    <ItemGroup Condition="'@(TestAssemblies)' == ''">
      <TestAssembliesWithPath Include="$(TestsProjectPattern)"/>
      <TestAssemblies Include="@(TestAssembliesWithPath->'%(Filename)%(Extension)')"/>
    </ItemGroup>
  </Target>
  <!-- helper target to create a directory for the project test results -->
  <Target Name="PrepareTests" DependsOnTargets="GetTestAssemblies">
    <MakeDir Directories="$(TestResultsDir)" Condition="'@(TestAssemblies)' != '' And !Exists($(TestResultsDir))"/>
  </Target>
  <!-- helper target to create a directory for the project test coverage results -->
  <Target Name="PrepareCoverage" Condition="'@(TestAssemblies)' != ''">
    <MakeDir Directories="$(CoverageReportDir)" Condition="!Exists($(CoverageReportDir))"/>
    <Delete Files="$(CoverageReportDir)" />
  </Target>

  <!-- import custom user solution targets -->
  <Target Name="EnsureOneClickBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <WarningText>OneClickBuild has not yet been initialized for this solution. Use ...</WarningText>
    </PropertyGroup>
    <Warning Condition="!Exists('$(SolutionDir)\solution.targets')" Text="$(WarningText)" />
  </Target>

  <!-- Helper task to select newest tool file in case there are mixed packages installed -->
  <PropertyGroup>
    <CodeTaskFactoryDll Condition="'$(MSBuildToolsVersion)' != '14'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryDll>
    <CodeTaskFactoryDll Condition="'$(MSBuildToolsVersion)' == '14'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryDll>
  </PropertyGroup>
  <UsingTask TaskName="GetLatest" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryDll)">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        Result = Files.LastOrDefault();
        ]]></Code>
    </Task>
  </UsingTask>
  
  <Import Project="$(SolutionDir)\solution.targets" Condition="Exists('$(SolutionDir)\solution.targets')" />
</Project>
